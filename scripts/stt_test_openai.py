# C:\JarvisBridge\scripts\stt_test_openai.py
import os
from dotenv import load_dotenv
from openai import OpenAI
import sounddevice as sd
import soundfile as sf
import numpy as np

def record_wav(path: str, seconds: int = 5, samplerate: int = 16000):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–æ–Ω–æ WAV —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞."""
    print(f"üéô –ó–∞–ø–∏—Å—å {seconds} —Å–µ–∫‚Ä¶ –ì–æ–≤–æ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
    audio = sd.rec(int(seconds * samplerate), samplerate=samplerate, channels=1, dtype="float32")
    sd.wait()
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int16 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    audio_int16 = (audio * np.iinfo(np.int16).max).astype(np.int16)
    sf.write(path, audio_int16, samplerate, subtype="PCM_16")
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {path}")

def speak(text: str, out_path: str = "stt_tts.wav"):
    """–û–∑–≤—É—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OpenAI TTS –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ sounddevice."""
    client = OpenAI()
    tts_model = os.getenv("OPENAI_TTS_MODEL", "tts-1")
    tts_voice = os.getenv("OPENAI_TTS_VOICE", "alloy")

    print(f"üîä –û–∑–≤—É—á–∏–≤–∞—é: {text!r}")
    speech = client.audio.speech.create(
        model=tts_model,
        voice=tts_voice,
        input=text,
        response_format="wav",
    )
    with open(out_path, "wb") as f:
        f.write(speech.content)

    data, sr = sf.read(out_path, dtype="float32")
    sd.play(data, sr)
    sd.wait()
    print("–ì–æ—Ç–æ–≤–æ ‚úÖ")

def main():
    load_dotenv()

    # 1) –ó–∞–ø–∏—Å—å
    wav_path = os.path.abspath("stt_test.wav")
    seconds = int(os.getenv("RECORD_SECONDS", "5"))
    record_wav(wav_path, seconds=seconds, samplerate=16000)

    # 2) –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
    client = OpenAI()
    stt_model = os.getenv("OPENAI_TRANSCRIBE_MODEL", "gpt-4o-transcribe")
    print(f"üß† –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å: –º–æ–¥–µ–ª—å={stt_model} ‚Ä¶")
    with open(wav_path, "rb") as f:
        result = client.audio.transcriptions.create(
            model=stt_model,
            file=f,
        )
    text = getattr(result, "text", "").strip()
    print("üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", text or "(–ø—É—Å—Ç–æ)")

    # 3) –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    reply = f"–¢—ã —Å–∫–∞–∑–∞–ª: {text}" if text else "–Ø –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑?"
    speak(reply)

if __name__ == "__main__":
    main()
