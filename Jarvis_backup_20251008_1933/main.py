import os
from dotenv import load_dotenv
from recorder import record_wav
from stt_openai import transcribe
from agent import run_agent

def ensure_env():
    load_dotenv()
    missing = []
    for k in ["OPENAI_API_KEY", "OPENAI_MODEL"]:
        if not os.getenv(k):
            missing.append(k)
    if missing:
        raise RuntimeError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}. –ó–∞–ø–æ–ª–Ω–∏ .env")

    try:
        sec = int(os.getenv("RECORD_SECONDS", "5"))
    except Exception:
        sec = 5
    return sec

def _pick_say():
    """
    –í—ã–±–∏—Ä–∞–µ—Ç TTS-–¥–≤–∏–∂–æ–∫ –ø–æ .env:
      TTS_ENGINE=openai  -> tts_openai.say
      TTS_ENGINE=local   -> tts_pyttsx3.say
    """
    engine = os.getenv("TTS_ENGINE", "openai").strip().lower()
    if engine == "local":
        from tts_pyttsx3 import say
    else:
        from tts_openai import say
    return say

def one_turn(seconds: int, say):
    wav_path = "input.wav"
    print(f"\n‚ñ∂ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –Ω–∞ {seconds} —Å–µ–∫...")
    record_wav(wav_path, seconds=seconds)
    print("‚èπÔ∏è  –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    text = transcribe(wav_path)
    if not text:
        print("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –£–≤–µ–ª–∏—á—å RECORD_SECONDS –≤ .env –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    print(f"üó£Ô∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")

    result = run_agent(text)
    if result.get("tool_logs"):
        for log in result["tool_logs"]:
            print(f"üîß {log['tool']}({log['args']}) ‚Üí {log['result']}")

    answer = (result.get("answer") or "–ì–æ—Ç–æ–≤–æ.").strip()
    print(f"ü§ñ Jarvis: {answer}")
    try:
        say(answer)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ TTS: {e}")

def main():
    print("üß† Jarvis: –∑–∞–ø–∏—Å—å ‚Üí —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ‚Üí –æ—Ç–≤–µ—Ç ‚Üí –¥–µ–π—Å—Ç–≤–∏—è ‚Üí –æ–∑–≤—É—á–∫–∞")
    seconds = ensure_env()
    say = _pick_say()
    print("–ù–∞–∂–º–∏—Ç–µ Enter, –∑–∞—Ç–µ–º –≥–æ–≤–æ—Ä–∏—Ç–µ... (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø–∏—Å–∏)")

    while True:
        try:
            input("‚ñ∂ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏. –ù–∞–∂–º–∏—Ç–µ Enter –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ...")
            one_turn(seconds, say)
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥.")
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
